<style>
    @font-face {
        font-family: "Roboto";
        font-weight: normal;
        font-style: normal;
        src:url("fonts/roboto-regular.ttf") format("woff");;
    }
    @font-face {
        font-family: "Roboto";
        font-weight: normal;
        font-style: italic;
        src:url("fonts/roboto-italic.ttf") format("woff");;
    }
    @font-face {
        font-family: "Roboto";
        font-weight: bold;
        src:url("fonts/roboto-bold.ttf") format("woff");;
    }

    @font-face {
        font-family: "Consolas";
        font-weight: normal;
        font-style: normal;
        src:url("fonts/consolas-regular.ttf") format("woff");;
    }
    @font-face {
        font-family: "Consolas";
        font-weight: normal;
        font-style: italic;
        src:url("fonts/consolas-italic.ttf") format("woff");;
    }
    @font-face {
        font-family: "Consolas";
        font-weight: bold;
        src:url("fonts/consolas-bold.ttf") format("woff");;
    }

    /* Change text font */
    div.text_cell_render {
        font-family: Roboto;
        font-size: 10.5pt;
        height: 100%;
    }

    /* Change code font */
    .CodeMirror {
        font-family: Consolas, monospace;
        font-size: 10.5pt;
    }

    div.output_area pre {
        font-family: Consolas, monospace;
        font-size: small;
    }

    /* Change code font */
    .rendered_html code {
        font-family: Consolas, monospace;
    }

    /* Disable prompt */
    .prompt{
        display: None;
    }

    /* Make container bigger */
    .container {
        width:95% !important;
    }

    /* Change font for headers */
    div.text_cell_render h1,
    div.text_cell_render h2,
    div.text_cell_render h3,
    div.text_cell_render h4,
    div.text_cell_render h5,
    div.text_cell_render h6 {
        font-family: 'Roboto';
        font-weight: 300;
    }

    div.text_cell_render h1 {
        font-size: 20pt;
    }

    div.text_cell_render h2 {
        font-size: 17pt;
    }

    div.text_cell_render h3 {
        font-size: 14pt;
    }
</style>

<script>
    MathJax.Hub.Config({
        TeX: {
            extensions: ["AMSmath.js"],
            equationNumbers: { autoNumber: "AMS", useLabelIds: true}
        },
        tex2jax: {
            inlineMath: [ ['$','$'], ["\\(","\\)"] ],
            displayMath: [ ['$$','$$'], ["\\[","\\]"] ]
        },
        displayAlign: 'center',
        "HTML-CSS": {
            availableFonts: ["TeX"],
            preferredFont: "TeX",
            styles: {'.MathJax_Display': {"margin": 4}}
        }
    });
    MathJax.Hub.Queue(
        ["resetEquationNumbers", MathJax.InputJax.TeX],
        ["PreProcess", MathJax.Hub],
        ["Reprocess", MathJax.Hub]
    );
</script>
